@model PIS_Project.Models.DataClasses.Card
    @{
        ViewBag.Title = "Card";
    }
<div class="container">
    <h2 class="mt-3">Cоздание карт</h2>
    <script type="text/javascript">
        var fileByteArray = [];
        async function ReadPhoto(input) {
            let file = input.files[0];
            var file1 = document.querySelector('input[type=file]').files[0];
            let reader = new FileReader();
            reader.addEventListener("load", function () {
                document.getElementById("img").src = reader.result;
                let str1 = /^[^,]+/.exec(reader.result)[0];
                let newstr = reader.result.replace(str1 + ",", '');
                document.getElementById("values[photo]").value = newstr;
                document.getElementById("values[photo]").innerText = newstr;
                console.log(newstr);
            }, false);
            if (file1) {
                reader.readAsDataURL(file1);
            }
        }

        String.prototype.replaceAt = function (index, replacement) {
            return this.substr(0, index) + replacement + this.substr(index + replacement.length);
        }

        function changeType1(input) {
            let elem = document.getElementById("type1").value;
            let val = document.getElementById("binary").value;
            val = val.replaceAt(3, elem)
            document.getElementById("binary").value = val;
            document.getElementById("binary").innerText = val;
            let digit = parseInt(val, 2);
            document.getElementById("values[type]").value = digit;
            document.getElementById("values[type]").innerText = digit;
        }
        function changeType2(input) {
            let elem = document.getElementById("type2").value;
            let val = document.getElementById("binary").value;
            val = val.replaceAt(4, elem[0])
            val = val.replaceAt(5, elem[1])
            document.getElementById("binary").value = val;
            document.getElementById("binary").innerText = val;
            let digit = parseInt(val, 2);
            document.getElementById("values[type]").value = digit;
            document.getElementById("values[type]").innerText = digit;
        }
        function changeType3(input) {
            let elem = document.getElementById("type3").value;
            let val = document.getElementById("binary").value;
            val = val.replaceAt(6, elem)
            document.getElementById("binary").value = val;
            document.getElementById("binary").innerText = val;
            let digit = parseInt(val, 2);
            document.getElementById("values[type]").value = digit;
            document.getElementById("values[type]").innerText = digit;
        }
        function changeType4(input) {
            let elem = document.getElementById("type4").value;
            let val = document.getElementById("binary").value;
            val = val.replaceAt(7, elem)
            document.getElementById("binary").value = val;
            document.getElementById("binary").innerText = val;
            let digit = parseInt(val, 2);
            document.getElementById("values[type]").value = digit;
            document.getElementById("values[type]").innerText = digit;
        }
    </script>
    <div>
        @using (Html.BeginForm("Create", "Register", FormMethod.Post))
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group row" style="margin-right: 0; margin-left: 0;">
                <div class="col-lg-8">
                    @Html.LabelFor(model => model.name, htmlAttributes: new { @class = "control-label" })
                    <div>
                        <input type="text" name="values[name]" pattern="^([А-Я]{1}[а-яё]{1,23}|[A-Z]{1}[a-z]{1,23})$" required class="form-control" />
                        @Html.ValidationMessageFor(model => model.name, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class=" offset-lg-1 col-lg-3">
                    @Html.LabelFor(model => model.birthday, htmlAttributes: new { @class = "control-label" })
                    <div>
                        <input id="datefield1" type='date' name="values[birthday]" required class="form-control" min='1899-01-01' max='2000-13-13' />
                        @Html.ValidationMessageFor(model => model.birthday, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <p>Sex </p>
            <select name="values[sex]" value="1">
                <option value="1">М</option>
                <option value="2">Ж</option>
                <option value="3">Ср</option>
            </select>
            <p>type </p>

            <select id="type1" onchange="changeType1(this)">
                <option value="1">Собака</option>
                <option value="0">Кошка</option>
            </select>

            <select id="type2" onchange="changeType2(this)">
                <option value="01">Маленькая</option>
                <option value="11">Большая</option>
                <option value="10">Средняя</option>
            </select>

            <select id="type3" onchange="changeType3(this)">
                <option value="1">Длиношерстная</option>
                <option value="0">Короткошерстная</option>
            </select>

            <select id="type4" onchange="changeType4(this)">
                <option value="1">Прямоволосая</option>
                <option value="0">Курчавая</option>
            </select>
            <input id="binary" value="00010111" hidden="hidden" />
            <input id="values[type]" name="values[type]" value="7" hidden="hidden" />
            //<p>bitrhday </p><input name="values[birthday]" type="date" required />
            //<p>id_mark </p><input type="number" name="values[id_mark]" />
            //<p>id_chip </p><input type="number" name="values[id_chip]" />
            <p>photo</p> <input onchange="ReadPhoto(this)" type="file" id="photo" />
            <input hidden="hidden" id="values[photo]" name="values[photo]" />
            <img id="img" />
            //<p>spec_mark </p><input name="values[spec_mark]" />
            //<p>owner_traits </p><input name="values[owner_traits]" />
            //<p>status </p>
            //<select name="values[id_status]">
            //    <option value="1">Жив</option>
            //    <option value="2">Выбыл по причине естественной смерти</option>
            //</select>
            //<p>date_status_change </p><input type="date" name="values[date_status_change]" />
            //<p>id_mu </p><input name="values[ID_MU]" value="@ViewBag.MU" hidden="hidden" />
            //<p>local_place </p><input name="values[local_place]" />
            //<p>sterilisation_date </p> <input type="date" name="values[sterilization_date]" /> <br>

            <div class="form-group">
                @Html.LabelFor(model => model.spec_mark, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-lg-12 col-md-12">
                    <input type="text" name="values[spec_mark]" required class="form-control" pattern="([A-zА-яЁё',;!.\s-]*)" />
                    @Html.ValidationMessageFor(model => model.spec_mark, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.owner_traits, htmlAttributes: new { @class = "control-label col-md-5" })
                <div class="col-lg-12 col-md-12">

                    <ul style="display: inline-flex; flex-wrap: wrap; width:100%; align-items: center; justify-content: space-between; padding-left: 0">
                        <li class="list-group-item col-lg-2 col-md-12 text-center">
                            <div class="ml-2">
                                <input type="checkbox" value="Ошейник" name="values[SetOwnerTraits]" class="form-check-input me-1 " style="margin-top: 0.4rem;" />
                                Ошейник
                            </div>
                        </li>

                        <li class="list-group-item col-lg-2 col-md-12 mt-lg-0 mt-sm-2 text-center">
                            <div class="ml-2">
                                <input type="checkbox" value="Одежда" name="values[SetOwnerTraits]" class="form-check-input me-1 " style="margin-top: 0.4rem;" />
                                Одежда
                            </div>
                        </li>

                        <li class="list-group-item col-lg-2 col-md-12 mt-lg-0 mt-sm-2 text-center">
                            <div class="ml-2">
                                <input type="checkbox" value="Шлейка" name="values[SetOwnerTraits]" class="form-check-input me-1 " style="margin-top: 0.4rem;" />
                                Шлейка
                            </div>
                        </li>

                        <li class="list-group-item col-lg-2 col-md-12 mt-lg-0 mt-sm-2 text-center">
                            <div class="ml-2">
                                <input type="checkbox" value="Чип" name="values[SetOwnerTraits]" class="form-check-input me-1 " style="margin-top: 0.4rem;" id="chipCheckbox" />
                                Чип
                            </div>
                        </li>
                    </ul>


                    @*@Html.EditorFor(model => model.owner_traits, new { htmlAttributes = new { @class = "form-control" } })*@
                    @*@Html.ValidationMessageFor(model => model.owner_traits, "", new { @class = "text-danger" })*@
                </div>
            </div>

            <div class="form-group row" style="margin-right: 0; margin-left: 0;">
                <div class="col-lg-4" id="idChipField">
                    @Html.LabelFor(model => model.id_chip, htmlAttributes: new { @class = "control-label" })
                    <div>
                        <input type="number" class="form-control" name="values[id_chip]" min=1 />
                        @Html.ValidationMessageFor(model => model.id_chip, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="offset-lg-1 col-lg-7" id="idMarkField">
                    @Html.LabelFor(model => model.id_mark, htmlAttributes: new { @class = "control-label" })
                    <div>
                        <input type="number" class="form-control" name="values[id_mark]" min=1 />
                        @Html.ValidationMessageFor(model => model.id_mark, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group row" style="margin-right: 0; margin-left: 0;">
                <div class="col-lg-4">
                    @Html.LabelFor(model => model.id_status, htmlAttributes: new { @class = "control-label" })
                    <div>

                        <select name="values[id_status]" value="1" class="form-control">

                            <option value="1">Жив</option>

                            <option value="2">Выбыл по причине естественной смерти</option>

                        </select>

                    </div>
                </div>
                <div class="offset-lg-1 col-lg-7">
                    @Html.LabelFor(model => model.date_status_change, htmlAttributes: new { @class = "control-label" })
                    <div>
                        <input id="datefield2" type='date' name="values[date_status_change]" required class="form-control" min='1899-01-01' max='2000-13-13' />
                        @Html.ValidationMessageFor(model => model.date_status_change, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group row" style="margin-right: 0; margin-left: 0;">
                <div class="col-lg-4">
                    @Html.LabelFor(model => model.ID_MU, htmlAttributes: new { @class = "control-label" })
                    <div>
                        <select name="values[ID_MU]" value="1">
                            <option value="2">Питомник</option>
                            <option value="3">Отлов</option>
                            <option value="4">Приют</option>
                        </select>
                        @Html.ValidationMessageFor(model => model.ID_MU, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="offset-lg-1 col-lg-7">
                    @Html.LabelFor(model => model.local_place, htmlAttributes: new { @class = "control-label" })
                    <div>
                        <input name="values[local_place]" required class="form-control" min=1 />
                        @Html.ValidationMessageFor(model => model.local_place, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.sterilization_date, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-lg-12 col-md-12">
                    <input id="datefield3" type='date' name="values[sterilization_date]" required class="form-control" min='1899-01-01' max='2000-13-13' />
                    @*@Html.ValidationMessageFor(model => model.sterilization_date, "", new { @class = "text-danger" })*@
                </div>
            </div>

            <div class="col-lg-12 col-md-12">
                @Html.ActionLink("Вернуться к журналу", "Sort", null, new { @class = "btn btn-success col-lg-3 col-md-12", @style = "background-color: #aebfbe; border-color: #aebfbe;" })
                <input type="submit" value="Отправить" class="btn btn-success col-lg-3 col-md-12" style="background-color: #aebfbe; border-color: #aebfbe;" /><br>
            </div>
        }
    </div>
</div>

    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
        @Scripts.Render("~/Scripts/limitdate.js")
        <script type="text/javascript">
        var today = new Date();
var dd = today.getDate();
var mm = today.getMonth()+1; //January is 0!
var yyyy = today.getFullYear();
 if(dd<10){
        dd='0'+dd
    } 
    if(mm<10){
        mm='0'+mm
    } 

today = yyyy+'-'+mm+'-'+dd;
            document.getElementById("datefield1").setAttribute("max", today);
            document.getElementById("datefield2").setAttribute("max", today);
            document.getElementById("datefield3").setAttribute("max", today);
            let save_chip = 0;

            $(document).ready(function () {

                if ($('#photo').val() == "") {
                    $('#deleteButton').hide();
                }
                if ($('#scan_frame_1').val() == "") {
                    $('#deleteScanButtonOne').hide();
                }
                if (!$("#chipCheckbox").is(':checked')) {
                    $("#id_chip").val(null);
                    $("#idChipField").hide();
                    $("#idMarkField").attr('class', 'col-lg-12');
                }
            });

            $("#name").change(function (e) {
                $(this).valid()
            })

            $("#local_place").change(function (e) {
                $(this).valid()
            })

            $("#chipCheckbox").change(function (e) {
                let check = $(this).is(':checked');
                if (!check) {
                    save_chip = $("#id_chip").val();
                    $("#id_chip").val(null);
                    $("#idChipField").hide();
                    $("#idMarkField").attr('class', 'col-lg-12');
                }
                else {
                    $("#idChipField").show();
                    $("#id_chip").val(save_chip);
                    $("#idMarkField").attr('class', 'col-lg-7 offset-lg-1');
                }
            });


            $("#ImageDataButton").click(function (e) {
                $("#ImageData").click();
            });

            $("#ImageData").change(function (e) {
                let file = document.getElementById("ImageData").files[0]
                if (file != null) {
                    let formData = new FormData()
                    formData.append("FileData", file)
                    $.ajax({
                        url: "/Register/UploadFile",
                        type: "POST",
                        data: formData,
                        processData: false,
                        contentType: false,
                        success: function (response) {
                            $('#photo').val(response)
                            $("#deleteButton").show();
                            let src = URL.createObjectURL(file);
                            let preview = document.getElementById("photoImg");
                            preview.src = src;
                        }
                    });
                }
            });

            $("#ScanDataButtonOne").click(function (e) {
                $("#ScanDataOne").click();
            });

            $("#ScanDataOne").change(function (e) {
                let file = document.getElementById("ScanDataOne").files[0]
                if (file != null) {
                    let formData = new FormData()
                    formData.append("FileData", file)
                    $.ajax({
                        url: "/Register/UploadFile",
                        type: "POST",
                        data: formData,
                        processData: false,
                        contentType: false,
                        success: function (response) {
                            $('#scan_frame_1').val(response)
                            $("#deleteScanButtonOne").show();
                            let span = document.getElementById("scanFrameTextOne");
                            span.innerText = "Есть загружнный документ";
                        }
                    });
                }
            });

            $("#deleteButton").click(function (e) {
                e.preventDefault();
                $('#photo').val("")
                $("#photoImg").attr('src', '')
                $('#deleteButton').hide();
            });

            $("#deleteScanButtonOne").click(function (e) {
                e.preventDefault();
                $('#scan_frame_1').val("")
                let span = document.getElementById("scanFrameTextOne");
                span.innerText = "Нет документа";
                $('#deleteScanButtonOne').hide();
            });</script>
    }
